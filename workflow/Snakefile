import pandas as pd
import os.path
import glob

configfile: "../config/config.yaml"

# Variables --------------------------------------------------------------------

pd.set_option('display.max_colwidth', None)
samplesheet = pd.read_csv(config["samplesheet"], sep="\t")

trim_outdir = os.path.join(config["results"] + "trimming/")
map_out_dir = os.path.join(config["results"], "mapping/")
map_out_vb_dir = os.path.join(config["results"], "mapping_VB/")
deeptools_dir = os.path.join(config["results"], "deeptools/")
multiqc_dir = os.path.join(config["results"], "multiQC/")
featureCount_dir = os.path.join(config["results"], "featureCounts/")
pirna_dir = os.path.join(config["results"], "piRNA_analysis/")
mirdeep_dir = os.path.join(config["results"], "mirDeep/")
cluster_dir = os.path.join(config["results"], "clusters/")
pirna_dir = os.path.join(config["results"], "piRNAs/")
mirna_dir = os.path.join(config["results"], "miRNAs/")


# ------------------------------------------------------------------------------
include: "rules/featureCounts.smk"
include: "rules/trim_small.smk"
include: "rules/mapping.smk"
include: "rules/mapping_VB.smk"
include: "rules/deeptools.smk"
include: "rules/multiQC.smk"
include: "rules/miRDeep_identification.smk"
include: "rules/cluster_identification.smk"
include: "rules/piRNAs.smk"
include: "rules/miRNAs.smk"

rule all:
    input:
        # Quality Control
        expand(os.path.join(trim_outdir, "file_links", "{sample}.fastq.gz"), sample = samplesheet["name"]),
        expand(os.path.join(trim_outdir, "{sample}_trimmed.fq.gz"), sample = samplesheet["name"]),
        os.path.join(deeptools_dir, "multiBamSummary.results.npz"),
        os.path.join(deeptools_dir, "plotCorrelation.png"), 
        os.path.join(deeptools_dir, "plotPCA.png"),
        os.path.join(multiqc_dir, "multiqc_report.html"),

        # Mapping - HiC
        expand(os.path.join(map_out_dir, "{sample}.sorted.bam"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_dir, "{sample}.sorted.uniquely.bam"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_dir, "{sample}.sorted.uniquely.bam.bai"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_dir, "{sample}.sorted.counts.tsv"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_dir, "{sample}.sorted.lengths.tsv"), sample = samplesheet["name"]),
        os.path.join(map_out_dir, "lengths.plot.png"),
        
        # Mapping - VB
        expand(os.path.join(map_out_vb_dir, "{sample}.sorted.bam"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_vb_dir, "{sample}.sorted.counts.tsv"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_vb_dir, "{sample}.sorted.uniquely.bam"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_vb_dir, "{sample}.sorted.uniquely.bam.bai"), sample = samplesheet["name"]),
        expand(os.path.join(map_out_vb_dir, "{sample}.sorted.nh.bam"), sample = samplesheet["name"]),

        # Feature Counts
        os.path.join(featureCount_dir, "annotations", saf_name),
        os.path.join(featureCount_dir, "annotations", "merged_annotation.saf"),
        os.path.join(featureCount_dir, "featureCounts.counts.tsv"),
        os.path.join(featureCount_dir, "counts.tsv"),

        # Library profile
        os.path.join(featureCount_dir, "libraries_profile.plot.png"),

        # Repeat analysis
        # expand(os.path.join(pirna_dir, "{sample}.genes.unassigned.bam"), sample = samplesheet["name"]),
        # os.path.join(pirna_dir, "repeats.featureCounts.counts.tsv"),

        # Unassigned characterization via miRDeep
        # expand(os.path.join(mirdeep_dir, "{sample}.nh.unassigned.bam"), sample = samplesheet["name"]),
        # expand(os.path.join(mirdeep_dir, "{sample}.reads_collapsed.fa"), sample = samplesheet["name"]),
        # expand(os.path.join(mirdeep_dir, "{sample}.reads_collapsed.arf"), sample = samplesheet["name"]),
        # os.path.join(mirdeep_dir, "known_pre_miRNA.fa"),
        # os.path.join(mirdeep_dir, "genome.fa"),
        # expand(os.path.join(mirdeep_dir, "{sample}_miRDeep", "results.log"), sample = samplesheet["name"]),

        # Cluster identification via proTRAC
        expand(os.path.join(cluster_dir, "{sample}_clusters", "protrac_results.log"), sample = samplesheet["name"]),

        # piRNAs
        ## Length distribution
        expand(os.path.join(pirna_dir, "{sample}.piRNAs.lengths.tsv"), sample = samplesheet["name"]),
        os.path.join(pirna_dir, "piRNAs.line.lengths.plot.png"),
        ## Pingpong signal
        expand(os.path.join(pirna_dir, "{sample}.piRNAs.pingpong.tsv"), sample = samplesheet["name"]),
        os.path.join(pirna_dir, "lines.piRNAs.pingpong.plot.png"),
        ## Nucleotide Bias
        expand(os.path.join(pirna_dir, "{sample}.piRNAs.sense.bam"), sample = samplesheet["name"]),
        expand(os.path.join(pirna_dir, "{sample}.piRNAs.sense.ntfreq.tsv"), sample = samplesheet["name"]),
        expand(os.path.join(pirna_dir, "{sample}.piRNAs.antisense.ntfreq.tsv"), sample = samplesheet["name"]),
        os.path.join(pirna_dir, "piRNAs.sense.ntfreq.plot.png"),
        os.path.join(pirna_dir, "piRNAs.antisense.ntfreq.plot.png"),




        







